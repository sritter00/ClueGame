Before:	public void initialize()
	{

		try {
			this.loadSetupConfig();
		} catch (BadConfigFormatException e) {
			new BadConfigFormatException();  // throw default error if no error was found and something went wrong
		}

		try {
			this.loadLayoutConfig();
		} catch (BadConfigFormatException e) {
			new BadConfigFormatException(); // throw default error if no error was found and something went wrong
		}

		for (int row = 0; row < numRows; row++) { //goes through each row and column and adds adj depending on if statements
			for (int col = 0; col < numColumns; col++) {
				if(grid[row][col].isDoorway()) { // if its a doorway get the center of the room and add that to adj List
					if(grid[row][col].getDoorDirection() == DoorDirection.UP){
						char roomInitial = grid[row-1][col].getInitial();
						grid[row][col].addAdjacency(roomMap.get(roomInitial).getCenterCell());
						roomMap.get(roomInitial).addDoorWay(grid[row][col]);
					}
					if(grid[row][col].getDoorDirection() == DoorDirection.DOWN){
						char roomInitial = grid[row+1][col].getInitial();
						grid[row][col].addAdjacency(roomMap.get(roomInitial).getCenterCell());
						roomMap.get(roomInitial).addDoorWay(grid[row][col]);
					}
					if(grid[row][col].getDoorDirection() == DoorDirection.RIGHT){
						char roomInitial = grid[row][col+1].getInitial();
						grid[row][col].addAdjacency(roomMap.get(roomInitial).getCenterCell());
						roomMap.get(roomInitial).addDoorWay(grid[row][col]);
					}
					if(grid[row][col].getDoorDirection() == DoorDirection.LEFT){
						char roomInitial = grid[row][col-1].getInitial();
						grid[row][col].addAdjacency(roomMap.get(roomInitial).getCenterCell());
						roomMap.get(roomInitial).addDoorWay(grid[row][col]);
					}
				}
				if(grid[row][col].getInitial() == 'W') { // if its a walkway add all walkway adjacencies
					if(grid[0].length > col+1 && grid[row][col+1].getInitial() == 'W') {
						grid[row][col].addAdjacency(grid[row][col+1] );
					}
					if(row - 1 >=  0 && grid[row-1][col].getInitial() == 'W') {
						grid[row][col].addAdjacency(grid[row-1][col]);
					}
					if (col -1 >= 0 && grid[row][col-1].getInitial() == 'W') {
						grid[row][col].addAdjacency(grid[row][col-1]);
					}
					if(grid.length > row + 1 && grid[row+1][col].getInitial() == 'W') {
						grid[row][col].addAdjacency(grid[row+1][col]);
					}
				}
			}
		}
		for(Map.Entry<Character, Room> entry : roomMap.entrySet()) {//For each room if it has center get all doorways and add that to the adjList
			for(BoardCell cell : entry.getValue().getDoorWays()) {
				if(entry.getValue().getCenterCell() != null) {
					entry.getValue().getCenterCell().addAdjacency(cell);
				}
				if(entry.getValue().getSecretPassage() != null) {
					entry.getValue().getCenterCell().addAdjacency(roomMap.get(entry.getValue().getSecretPassage()).getCenterCell());
				}
			}
		}
		visited = new HashSet<>();
		targets = new HashSet<>();

	}
after:
public void initialize()
	{
		targets = new HashSet<>();
		visited = new HashSet<>();
		numColumns = 0;
		numRows = 0;
		roomMap = new HashMap<>();
		try {
			this.loadSetupConfig();
		} catch (BadConfigFormatException e) {
			new BadConfigFormatException();  // throw default error if no error was found and something went wrong
		}

		try {
			this.loadLayoutConfig();
		} catch (BadConfigFormatException e) {
			new BadConfigFormatException(); // throw default error if no error was found and something went wrong
		}

		for (int row = 0; row < numRows; row++) { //goes through each row and column and adds adj depending on if statements
			for (int col = 0; col < numColumns; col++) {
				if(grid[row][col].isDoorway()) { // if its a doorway get the center of the room and add that to adj List
					if(grid[row][col].getDoorDirection() == DoorDirection.UP){
						char roomInitial = grid[row-1][col].getInitial();
						grid[row][col].addAdjacency(roomMap.get(roomInitial).getCenterCell());
						roomMap.get(roomInitial).addDoorWay(grid[row][col]);
					}
					if(grid[row][col].getDoorDirection() == DoorDirection.DOWN){
						char roomInitial = grid[row+1][col].getInitial();
						grid[row][col].addAdjacency(roomMap.get(roomInitial).getCenterCell());
						roomMap.get(roomInitial).addDoorWay(grid[row][col]);
					}
					if(grid[row][col].getDoorDirection() == DoorDirection.RIGHT){
						char roomInitial = grid[row][col+1].getInitial();
						grid[row][col].addAdjacency(roomMap.get(roomInitial).getCenterCell());
						roomMap.get(roomInitial).addDoorWay(grid[row][col]);
					}
					if(grid[row][col].getDoorDirection() == DoorDirection.LEFT){
						char roomInitial = grid[row][col-1].getInitial();
						grid[row][col].addAdjacency(roomMap.get(roomInitial).getCenterCell());
						roomMap.get(roomInitial).addDoorWay(grid[row][col]);
					}
				}
				if(grid[row][col].getInitial() == 'W') { // if its a walkway add all walkway adjacencies
					if(grid[0].length > col+1 && grid[row][col+1].getInitial() == 'W') {
						grid[row][col].addAdjacency(grid[row][col+1] );
					}
					if(row - 1 >=  0 && grid[row-1][col].getInitial() == 'W') {
						grid[row][col].addAdjacency(grid[row-1][col]);
					}
					if (col -1 >= 0 && grid[row][col-1].getInitial() == 'W') {
						grid[row][col].addAdjacency(grid[row][col-1]);
					}
					if(grid.length > row + 1 && grid[row+1][col].getInitial() == 'W') {
						grid[row][col].addAdjacency(grid[row+1][col]);
					}
				}
			}
		}
		for(Map.Entry<Character, Room> entry : roomMap.entrySet()) {//For each room if it has center get all doorways and add that to the adjList
			for(BoardCell cell : entry.getValue().getDoorWays()) {
				if(entry.getValue().getCenterCell() != null) {
					entry.getValue().getCenterCell().addAdjacency(cell);
				}
				if(entry.getValue().getSecretPassage() != null) {
					entry.getValue().getCenterCell().addAdjacency(roomMap.get(entry.getValue().getSecretPassage()).getCenterCell());
				}
			}
		}

	}

Git Log:

commit 3cd4b084c743280f13fb5b9a583bcb889ae322fc
Author: Carter Gorling <rcgorling@mines.edu>
Date:   Mon Oct 28 12:29:43 2024 -0600

    Eigth refactor changing ch to cellInitial (lines 113 and 116) of the Board class

commit 33616179638122ae01adddcdbd2574ff7337eabd
Author: Carter Gorling <rcgorling@mines.edu>
Date:   Mon Oct 28 12:14:23 2024 -0600

    Seventh refactor initializing an instance variable to null in the constructor for the Room class.

commit f868167bdaaaa89b13888d9f3ca263c5ecc2ebdc
Author: Carter Gorling <rcgorling@mines.edu>
Date:   Mon Oct 28 12:11:14 2024 -0600

    Sixth refactor, adding comment for the getOccupied method in BoardCell

commit af45160a7cba4260e1cb129bac70ac34a958389a
Author: Shane Ritter <sritter@mines.edu>
Date:   Sun Oct 27 19:14:32 2024 -0600

    refector 5.5 last push produced errors they are now fixed

commit 7eebbbafd3acf414f628edd771c29e8ff97c6cc1
Author: Shane Ritter <sritter@mines.edu>
Date:   Sun Oct 27 19:10:54 2024 -0600

    Fifth refector made sure that when a initalize is called we reset the variables used to create the board.

commit a692619c1b0c7fd13b959f35c9cc48b1121f7768
Author: Shane Ritter <sritter@mines.edu>
Date:   Sun Oct 27 19:05:06 2024 -0600

    fourth refactor made sure variables were declared in the right spot/ made sure that layoutConfigFiles was set to null if not used same with setconfigfiles

commit 7ad556746a278c49706bc3e25e714e818e4ffce1
Author: Shane Ritter <sritter@mines.edu>
Date:   Sun Oct 27 19:02:32 2024 -0600

    third refactor changed variable name ch (line72) to cellInitial

commit 90cf1157a7a7da9109953704ea4e2e029fdab406
Author: Shane Ritter <sritter@mines.edu>
Date:   Sun Oct 27 18:58:59 2024 -0600

    Chaned CsvFile to csvFile and TxtFile to txtFile

commit 2fe309a7036888eb2416278cedb65b2ad1b9732b
Author: Shane Ritter <sritter@mines.edu>
Date:   Sun Oct 27 18:54:11 2024 -0600

    First Refactor added some discriptive comments for curtain functions in board
